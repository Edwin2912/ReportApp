package com.example.system;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.core.graphics.drawable.RoundedBitmapDrawable;import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;import android.Manifest;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.media.MediaPlayer;import android.net.Uri;import android.nfc.Tag;import android.os.Bundle;import android.os.Handler;import android.speech.tts.TextToSpeech;import android.telephony.SmsManager;import android.text.Spannable;import android.text.SpannableString;import android.text.Spanned;import android.text.method.LinkMovementMethod;import android.text.style.ClickableSpan;import android.util.Log;import android.util.Patterns;import android.view.ContextMenu;import android.view.Gravity;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import android.widget.VideoView;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import java.util.Locale;import io.paperdb.Paper;import static com.example.system.Emergency_Message.SELECT_CONTACT;import static com.example.system.Emergency_Report.SEND_SMS_PERMISSION_REQUEST_CODE;public class Login_Activity extends AppCompatActivity implements LocationListener {    private static final String TAG = "Login_Activity";    Button login;    Button Register, EMS;    TextToSpeech t1;    protected LocationManager locationManager;    TextView txtLat, txtLong, your_lat,your_long,Forgot_Password;    EditText Txt_password, Txt_username;    String Longitude, Latitude;    Context context = this;    public static String id;    public static String UserName;    public static String UserPassword;    ImageView UJ_Logo;    private static final int REQUEST_CALL = 1;    Animation from_bottom, from_left, from_right;    Animation from_top;    int val = 1;    private VideoView myVideo;    private FirebaseAuth mAuth;    private ProgressDialog progressDialog;    private CheckBox checkBoxRememberMe;    SharedPreferences prefs;    SharedPreferences.Editor editor;    String locationText = "";    private Handler mHandler;    private int mInterval = 13000;    @SuppressLint("NewApi")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.login_main);        login = findViewById(R.id.Btn_login);        UJ_Logo = findViewById(R.id.imageView_UJ_Logo);        Register = findViewById(R.id.Btn_Register);        Txt_password = findViewById(R.id.Txt_password);        Txt_username = findViewById(R.id.Txt_useremail);        checkBoxRememberMe = findViewById(R.id.checkBoxRemeberMe);        Forgot_Password = findViewById(R.id.txtForgot_Password);        myVideo = findViewById(R.id.videoView2);        EMS = findViewById(R.id.btn_ems);        registerForContextMenu(EMS);        progressDialog = new ProgressDialog(this);        prefs = getSharedPreferences("UserData", MODE_PRIVATE);        editor = prefs.edit();        mAuth = FirebaseAuth.getInstance();        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.uj_sport_logo);        RoundedBitmapDrawable roundedBitmapDrawable = RoundedBitmapDrawableFactory.create(getResources(), bitmap);        roundedBitmapDrawable.setCircular(true);        UJ_Logo.setImageDrawable(roundedBitmapDrawable);        Paper.init(context);        //myVideo.        Uri videoUri = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.bubbles);        myVideo.setVideoURI(videoUri);        myVideo.start();        myVideo.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {            @Override            public void onPrepared(MediaPlayer mediaPlayer) {                mediaPlayer.setLooping(true);            }        });        Spannable spannableString = new SpannableString("Forgot Password");        ClickableSpan span = new ClickableSpan() {            @Override            public void onClick(View view)            {                forgot_password();               // showDialog();            }        };        spannableString.setSpan(span,0,15, Spanned.SPAN_EXCLUSIVE_INCLUSIVE);        Forgot_Password.setText(spannableString);        Forgot_Password.setMovementMethod(LinkMovementMethod.getInstance());        from_bottom = AnimationUtils.loadAnimation(this, R.anim.from_bottom);        from_top = AnimationUtils.loadAnimation(this, R.anim.from_top);        from_left = AnimationUtils.loadAnimation(this, R.anim.from_left);        from_right = AnimationUtils.loadAnimation(this, R.anim.from_right);        UJ_Logo.setAnimation(from_top);        login.setAnimation(from_bottom);        Register.setAnimation(from_bottom);        Txt_password.setAnimation(from_left);        Txt_username.setAnimation(from_right);        t1 = new TextToSpeech(getBaseContext(), new TextToSpeech.OnInitListener() {            @Override            public void onInit(int status) {                if (status != TextToSpeech.ERROR) {                    t1.setLanguage(Locale.US);                }            }        });        String username = prefs.getString("username", "");        String password = prefs.getString("password", "");        checkBoxRememberMe.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (checkBoxRememberMe.isChecked()) {                    Txt_username.setText(username);                    Txt_password.setText(password);                }            }        });        EMS.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                showDialog();            }        });        Handler handler2 = new Handler();        handler2.postDelayed(new Runnable()        {            public void run() {                mHandler = new Handler();                startRepeatingTask();            }        }, 9000);    }    public void onBackPressed() {        super.onBackPressed();        finish();        //return;    }    @Override    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {        super.onCreateContextMenu(menu, v, menuInfo);        getMenuInflater().inflate(R.menu.ems_menu, menu);    }    @Override    public void onStart() {        super.onStart();        // Check if user is signed in (non-null) and update UI accordingly.        FirebaseUser currentUser = mAuth.getCurrentUser();        if (checkPermission(Manifest.permission.ACCESS_FINE_LOCATION))        {            locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);        } else        {            ActivityCompat.requestPermissions(Login_Activity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, SELECT_CONTACT);        }    }    @Override    protected void onResume() {        super.onResume();        Uri videoUri = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.bubbles);        myVideo.setVideoURI(videoUri);        myVideo.start();    }    @Override    public boolean onContextItemSelected(@NonNull MenuItem item) {        switch (item.getItemId()) {            case R.id.police:                makePhoneCall("10111");                return true;            case R.id.ambulance:                makePhoneCall("10111");                return true;            case R.id.fire:                makePhoneCall("10111");                return true;            case R.id.security:                makePhoneCall("0115591312");                return true;            case R.id.personal_details:                Intent i = new Intent(getApplicationContext(), My_Emergency_Details.class);                startActivity(i);                overridePendingTransition(R.anim.slide_in_right_activity, R.anim.slide_out_left_activity);                return true;            default:                return super.onContextItemSelected(item);        }    }    private void makePhoneCall(String text) {        String number = text;        if (number.trim().length() > 0) {            if (ContextCompat.checkSelfPermission(Login_Activity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(Login_Activity.this, new String[]{Manifest.permission.CALL_PHONE}, REQUEST_CALL);            } else {                String dial = "tel:" + number;                startActivity(new Intent(Intent.ACTION_CALL, Uri.parse(dial)));            }        }    }    @SuppressLint("NewApi")    public void Buttons(View v) {        switch (v.getId()) {            case R.id.Btn_login:                if (!Txt_password.getText().toString().equals("") && !Txt_username.getText().toString().equals("")) {//                    t1.setLanguage(Locale.US);//                    t1.speak("login", TextToSpeech.QUEUE_ADD, null);                    try {                        if (Helper_Class.connectionAvailable(context)) {                            progressDialog.setTitle("Please Wait");                            progressDialog.setMessage("Logging in.....");                            progressDialog.show();                            mAuth.signInWithEmailAndPassword(Txt_username.getText().toString().trim(), Txt_password.getText().toString().trim())                                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                                        @Override                                        public void onComplete(@NonNull Task<AuthResult> task) {                                            if (task.isSuccessful()) {                                                if (checkBoxRememberMe.isChecked()) {                                                    editor.putString("username", Txt_username.getText().toString().trim());                                                    editor.putString("password", Txt_password.getText().toString().trim());                                                    editor.commit();                                                }                                                Toast toast = Toast.makeText(Login_Activity.this, "Logged in Successfully!!", Toast.LENGTH_SHORT);                                                toast.setGravity(Gravity.CENTER, 0, 0);                                                toast.show();                                                Intent i = new Intent(getApplicationContext(), Home_Activity.class);                                                startActivity(i);                                                overridePendingTransition(R.anim.slide_in_right_activity, R.anim.slide_out_left_activity);                                                Log.d(TAG, "signInWithEmail:success");                                                progressDialog.cancel();                                            } else {                                                progressDialog.cancel();                                                Txt_username.setError(getString(R.string.input_username));                                                Txt_username.requestFocus();                                                Txt_password.setError(getString(R.string.input_password));                                                Txt_password.requestFocus();                                                Log.w(TAG, "signInWithEmail:failure", task.getException());                                                Toast.makeText(Login_Activity.this, "Authentication failed.",                                                        Toast.LENGTH_SHORT).show();                                            }                                        }                                    });                        } else {                            Toast("!! No internet connection !!");                        }                    } catch (Exception e) {                        Toast.makeText(Login_Activity.this, e.getMessage(), Toast.LENGTH_SHORT).show();                    }//end of try catch                } else {                    t1.setLanguage(Locale.US);                    t1.speak("Please fill in all fields", TextToSpeech.QUEUE_ADD, null);                    Toast("Please fill in all fields");                }//end of if else                break;            case R.id.Btn_Register:                startActivity(new Intent(this, Register_User.class));                overridePendingTransition(R.anim.slide_in_right_activity, R.anim.slide_out_left_activity);                break;        }    }    public void Toast(String msg) {        View view = getLayoutInflater().inflate(R.layout.toast_uj, (ViewGroup) findViewById(R.id.toast_uj));        TextView text = (TextView) view.findViewById(R.id.textToast);        text.setText(msg);        Toast toast = new Toast(Login_Activity.this);        toast.setDuration(Toast.LENGTH_LONG);        toast.setView(view);        toast.setGravity(Gravity.BOTTOM | Gravity.FILL_HORIZONTAL, 0, 0);        toast.show();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == REQUEST_CALL) {            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                makePhoneCall("");            } else {                Toast.makeText(this, "Permission DENIED", Toast.LENGTH_SHORT).show();            }        }    }    void showDialog() {        LayoutInflater inflater = LayoutInflater.from(this);        View view = inflater.inflate(R.layout.alert_dialog, null);        AlertDialog alertDialog = new AlertDialog.Builder(this).setView(view).create();        Button acceptButton = view.findViewById(R.id.acceptButton);        Button cancelButton = view.findViewById(R.id.cancelButton);        your_lat =  view.findViewById(R.id.textView26);        your_long = view. findViewById(R.id.textView27);        if (locationText != ""&& locationText!=null)        {            your_lat.setText("Latitude "+Latitude);            your_long.setText("Longitude "+Longitude);        }        acceptButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Log.e(TAG, "onClick: accept button");                if (checkPermission(Manifest.permission.SEND_SMS)) {                    try {                        if (Latitude != null && Longitude != null&&locationText != ""&&locationText !=null)                        {                            SmsManager mm = SmsManager.getDefault();                            mm.sendTextMessage("0712771026", null, "Hi i am currently not sure where i am ,I am in need of medical attention. Here are my current coordinates :[ Latitude :" + Latitude + ":" + "[ longitude :" + Longitude, null, null);                        }                        else if(Latitude == null && Longitude == null)                        {                            getLocation();                            if (Latitude != null && Longitude != null&&locationText != ""&&locationText !=null)                            {                                SmsManager mm = SmsManager.getDefault();                                mm.sendTextMessage("0712771026", null, "Hi i am currently not sure where i am ,I am in need of medical attention. Here are my current coordinates :[ Latitude :" + Latitude + ":" + "[ longitude :" + Longitude, null, null);                            }                        }                    } catch (Exception ex)                    {                    }                    System.out.println("SMS has been sent");                    alertDialog.dismiss();                } else {                    ActivityCompat.requestPermissions(Login_Activity.this, new String[]{Manifest.permission.SEND_SMS}, SEND_SMS_PERMISSION_REQUEST_CODE);                }            }        });        cancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Log.e(TAG, "onClick: cancel button");                alertDialog.dismiss();            }        });        alertDialog.show();    }    private boolean checkPermission(String permission) {        int check = ContextCompat.checkSelfPermission(this, permission);        return check == PackageManager.PERMISSION_GRANTED;    }    @Override    public void onLocationChanged(Location location)    {        locationText = location.getLatitude() + "," + location.getLongitude();        Latitude = ":"+ location.getLatitude()+ "";        Longitude = ":"+ location.getLongitude()+ "";        //SmsManager mm = SmsManager.getDefault();        //mm.sendTextMessage("0712771026", null, "Hi i am currently not sure where i am ,I am in need of medical attention. Here are my current coordinates :[ Latitude :" + Latitude + ":" + "[ longitude :" + Longitude, null, null);    }    @Override    public void onProviderDisabled(String provider) {        Log.d("Latitude", "disable");        Toast.makeText(Login_Activity.this, "Please Enable GPS", Toast.LENGTH_SHORT).show();    }    @Override    public void onProviderEnabled(String provider) {        Log.d("Latitude", "enable");        Toast.makeText(Login_Activity.this, "GPS Enabled", Toast.LENGTH_SHORT).show();    }    @Override    public void onStatusChanged(String provider, int status, Bundle extras) {        Log.d("Latitude", "status");    }    void getLocation()    {        try        {            locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 8000, 7, (LocationListener) this);        }        catch(SecurityException e)        {            e.printStackTrace();        }    }    Runnable mStatusChecker = new Runnable()    {        @Override        public void run()        {            try            {                getLocation(); //this function can change value of mInterval.                if (locationText == ""||locationText==null)                {                    Toast.makeText(getApplicationContext(), "Trying to retrieve coordinates.", Toast.LENGTH_LONG).show();                }            } finally            {                mHandler.postDelayed(mStatusChecker, mInterval);            }        }    };    void startRepeatingTask() {        mStatusChecker.run();    }    void forgot_password()    {        LayoutInflater inflater = LayoutInflater.from(this);        View view = inflater.inflate(R.layout.forgot_password_pop_up, null);        AlertDialog alertDialog = new AlertDialog.Builder(this).setView(view).create();        EditText Txt_useremail = view.findViewById(R.id.Txt_forgot_user_password_email);        Button submit = view.findViewById(R.id.button19);        submit.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View view)            {                final String email = Txt_useremail.getText().toString().trim();                if (email.isEmpty())                {                    Txt_useremail.setError(getString(R.string.input_error_email));                    Txt_useremail.requestFocus();                    return;                }                if (!Patterns.EMAIL_ADDRESS.matcher(email).matches())                {                    Txt_useremail.setError(getString(R.string.input_error_email_invalid));                    Txt_useremail.requestFocus();                    return;                }                if (Helper_Class.connectionAvailable(context))                {                    progressDialog.setTitle("Please Wait");                    progressDialog.setMessage("Sending Re-set link.....");                    progressDialog.show();                    mAuth.sendPasswordResetEmail(Txt_useremail.getText().toString().trim()).addOnCompleteListener(new OnCompleteListener<Void>() {                        @Override                        public void onComplete(@NonNull Task<Void> task)                        {                            if (task.isSuccessful())                            {                                progressDialog.dismiss();                                Toast("Password reset link sent to email");                                Intent i = new Intent(context,Login_Activity.class);                                startActivity(i);                                alertDialog.dismiss();                                overridePendingTransition(R.anim.slide_in_right_activity, R.anim.slide_out_right_activity);                            }                            else                                {                                    Toast("Password reset link not sent to email !!");                                }                        }                    });                }                else                {                    Toast("!! No internet connection !!");                }            }        });        alertDialog.show();    }}